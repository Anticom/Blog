<?php
/**
 * BlogEntryRepository.php
 *
 * @author    Timo M
 * @namespace Anticom\ShowcaseBundle\Entity
 * @package   Entity
 * @license   http://www.opensource.org/licenses/mit-license.php MIT
 */

namespace Anticom\ShowcaseBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * Class BlogEntryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogEntryRepository extends EntityRepository {
    /**
     * Find the previous BlogEntry to the given one
     *
     * @param BlogEntry $blogEntry
     * @return null|BlogEntry
     */
    public function findPrev(BlogEntry $blogEntry) {
        return $this
            ->getEntityManager()
            ->createQuery('SELECT be FROM AnticomShowcaseBundle:BlogEntry be WHERE be.id < :currentId ORDER BY be.id DESC')
            ->setMaxResults(1)
            ->setParameter('currentId', $blogEntry->getId())
            ->getOneOrNullResult();
    }

    /**
     * Find the next BlogEntry to the given one
     *
     * @param BlogEntry $blogEntry
     * @return null|BlogEntry
     */
    public function findNext(BlogEntry $blogEntry) {
        return $this
            ->getEntityManager()
            ->createQuery('SELECT be FROM AnticomShowcaseBundle:BlogEntry be WHERE be.id > :currentId ORDER BY be.id ASC')
            ->setMaxResults(1)
            ->setParameter('currentId', $blogEntry->getId())
            ->getOneOrNullResult();
    }

    /**
     * Find BlogEntries by a given page-No. and records per page
     *
     * @param int $page           Current page to display, reaching from 1 to n
     * @param int $recordsPerPage Used to limit the number of pages
     * @return BlogEntry[]
     */
    public function findByPage($page, $recordsPerPage) {
        $offset = $recordsPerPage * ($page - 1);
        return $this->findBy(array(), array('id' => 'ASC'), $recordsPerPage, $offset);
    }

    /**
     * Count how many pages there are according to DB records
     *
     * @param   int $recordsPerPage Required for calculation
     * @return  float
     */
    public function getPageCount($recordsPerPage) {
        $count = $this->getEntityManager()->createQuery('SELECT COUNT(be.id) FROM AnticomShowcaseBundle:BlogEntry be')->getSingleScalarResult();
        return ceil($count / $recordsPerPage);
    }

    /**
     * Get some information about a given page
     *
     * @param int $page
     * @param int $recordsPerPage
     * @return array
     */
    public function getPageInfo($page, $recordsPerPage) {
        $pageCount = $this->getPageCount($recordsPerPage);

        return array(
            'current' => $page,
            'count'   => $pageCount,
            'hasPrev' => $page > 1,
            'hasNext' => $page < $pageCount
        );
    }
}
