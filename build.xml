<?xml version="1.0"?>

<project name="Automated Build tasks" default="main:build" basedir=".">
    <!--<php expression="include('vendor/autoload.php')"/>-->

    <!--region config-->
    <property name="config.app.name" value="Showcase Project"/>
    <!--endregion-->

    <property name="dir.base" value="." override="true"/>
    <property name="dir.src" value="${dir.base}/src"/>
    <property name="dir.app" value="${dir.base}/app"/>

    <property name="dir.vendor" value="${dir.base}/vendor"/>
    <property name="dir.doc" value="${dir.base}/doc"/>
    <property name="dir.doc.coverage" value="${dir.base}/doc/coverage"/>
    <property name="dir.doc.api" value="${dir.base}/doc/api"/>

    <property name="file.debug.fileset" value="${dir.base}/fileset.txt"/>

    <property name="console.symfony" value="${dir.app}/console"/>

    <!--region filesets-->
    <fileset dir="${dir.src}" id="sourceWithoutTests">
        <include name="**/*.php"/>

        <exclude name="**/Tests/**Test.php"/>
    </fileset>
    <fileset dir="${dir.src}" id="source">
        <include name="**/*.php"/>
    </fileset>
    <fileset dir="${dir.src}" id="tests">
        <include name="**/Tests/**Test.php"/>
    </fileset>
    <fileset dir="${dir.src}" id="assets">
        <include name="**/Resources/public/**"/>

        <!--project specific-->
        <exclude name="Anticom/ShowcaseBundle/Resources/public/user_blank.png"/>
        <exclude name="Anticom/ShowcaseBundle/Resources/public/app.css"/>
        <exclude name="Anticom/ShowcaseBundle/Resources/public/tools.js"/>
    </fileset>
    <!--endregion-->

    <!--region checks-->
    <target name="check:composer:installed" description="Checks, whether composer.lock is present">
        <available file="composer.lock" property="composer.installed" value="true"/>
    </target>
    <target name="check:phpunit:configuration" description="Chooses the right phpunit config file">
        <if>
            <available property="null" file="${dir.app}/phpunit.xml"/>
            <then>
                <property name="phpunit.configuration" value="${dir.app}/phpunit.xml"/>
            </then>
            <elseif>
                <available property="null" file="${dir.app}/phpunit.dist.xml"/>
                <then>
                    <property name="phpunit.configuration" value="${dir.app}/phpunit.dist.xml"/>
                </then>
            </elseif>
            <else>
                <property name="phpunit.configuration" value="[FILE NOT FOUND]"/>
                <!--<fail message="Neither phpunit.dist.xml nor phpunit.xml found in ${appdir}"/>-->
            </else>
        </if>
    </target>
    <!--endregion-->

    <!--region init-->
    <target name="prepare:clean" description="Cleans up build directories">
        <echo message="Deleting documentation directory structure (${dir.doc})"/>
        <delete dir="${dir.doc.api}"/>
        <delete dir="${dir.doc.coverage}"/>
        <delete dir="${dir.doc}"/>
    </target>
    <target name="prepare:cleanAll" depends="prepare:clean" description="Cleans up generated files and folders. Brings back repo to its initial state">
        <echo message="Deleting vendor directory (${dir.vendor})"/>
        <delete dir="${dir.vendor}"/>
        <echo message="Deleting asset directories"/>
        <!--TODO do delete assets-->
    </target>
    <target name="prepare:init" depends="prepare:clean" description="Creates cleaned up directory structure again">
        <echo message="Creating documentation directory structure (${dir.doc})"/>
        <mkdir dir="${dir.doc}"/>
        <mkdir dir="${dir.doc.api}"/>
        <mkdir dir="${dir.doc.coverage}"/>
    </target>
    <!--endregion-->

    <target name="composer:install" depends="check:composer:installed" description="Installs composer vendor libs">
        <if>
            <istrue value="${composer.installed}"/>
            <then>
                <echo message="composer.lock is already present. Not running 'composer install'"/>
            </then>
            <else>
                <composer command="install">
                    <arg value="--prefer-source"/>
                </composer>
            </else>
        </if>
    </target>
    <target name="composer:update" depends="check:composer:installed" description="Updates composer vendor libs">
        <if>
            <istrue value="${composer.installed}"/>
            <then>
                <composer command="update"/>
            </then>
            <else>
                <echo message="composer.lock is not present. You need to run composer_install target first."/>
            </else>
        </if>
    </target>

    <target name="assets:install" description="installs assets">
        <!--bower-->
        <exec command="bower install" checkreturn="true"/>
        <!--tinymce-->
        <exec command="jake" dir="${dir.src}/Anticom/ShowcaseBundle/Resources/public/tinymce" checkreturn="true"/>
        <!--tinymce de_DE-->
        <!--TODO figure this one out-->
    </target>
    <target name="assets:update" depends="assets:install" description="updates assets">
        <exec executable="${console.symfony}">
            <arg value="assets:install"/>
            <arg value="-n"/>
        </exec>
    </target>

    <target name="database:create" description="Creates the default database">
        <exec executable="${console.symfony}">
            <arg value="doctrine:database:create"/>
            <arg value="-n"/>
        </exec>
    </target>
    <target name="database:schema:create" description="Creates the schema">
        <exec executable="${console.symfony}">
            <arg value="doctrine:schema:create"/>
            <arg value="-n"/>
        </exec>
    </target>
    <target name="database:fixtures:load" description="Loads data fixtures">
        <exec executable="${console.symfony}">
            <arg value="doctrine:schema:drop"/>
            <arg value="-n"/>
            <arg value="--force"/>
        </exec>
        <exec executable="${console.symfony}">
            <arg value="doctrine:schema:create"/>
            <arg value="-n"/>
        </exec>
        <exec executable="${console.symfony}">
            <arg value="doctrine:fixtures:load"/>
            <arg value="-n"/>
        </exec>
    </target>

    <target name="build:phpunit" depends="prepare:init, check:phpunit:configuration" description="Runs PHPUnit to generate code coverage information">
        <phpunit configuration="${dir.app}" codecoverage="true">
            <formatter type="plain" usefile="false"/>
            <formatter type="summary" usefile="true" todir="${dir.doc.coverage}"/>
        </phpunit>
    </target>
    <target name="build:phpdoc2" depends="prepare:init" description="Generate API documentation using PHPDoc2">
        <phpdoc2 title="${config.app.name}"
                 destdir="${dir.doc.api}"
                 template="responsive-twig">
            <!--<fileset refid="source"/>-->
        </phpdoc2>
    </target>

    <!--debugging-->
    <target name="debug:fileset">
        <delete file="${file.debug.fileset}"/>
        <echo file="${file.debug.fileset}" append="true" message="sourceWithoutTests${line.separator}"/>
        <foreach param="filename" absparam="absfilename" target="debug:fileset:echo">
            <fileset refid="sourceWithoutTests"/>
        </foreach>

        <echo file="${file.debug.fileset}" append="true" message="source${line.separator}"/>
        <foreach param="filename" absparam="absfilename" target="debug:fileset:echo">
            <fileset refid="source"/>
        </foreach>

        <echo file="${file.debug.fileset}" append="true" message="tests${line.separator}"/>
        <foreach param="filename" absparam="absfilename" target="debug:fileset:echo">
            <fileset refid="tests"/>
        </foreach>
        <!--
        <echo file="${file.debug.fileset}" append="true" message="assets${line.separator}"/>
        <foreach param="filename" absparam="absfilename" target="debug:fileset:echo">
            <fileset refid="assets"/>
        </foreach>
        -->
    </target>
    <target name="debug:fileset:echo">
        <!--<echo file="${file.debug.fileset}" append="true">file: rel:${filename}|abs:${absfilename}${line.separator}</echo>-->
        <echo file="${file.debug.fileset}" append="true">  - ${absfilename}${line.separator}</echo>
    </target>

    <target name="main:debug" depends="check:composer:installed, check:phpunit:configuration" description="[MAIN] Prints out some Variables verifying that the build process should work fine">
        <echo message="=================================================="/>
        <echo message="Host information:"/>
        <echo message="${host.name} [Domain: ${host.domain}]"/>
        <echo message="${os.name}: ${host.os.version} [Release: ${host.os.release}]"/>
        <echo message="File system:            ${host.fstype}"/>
        <echo message="Processor architecture: ${host.arch}"/>
        <echo message="=================================================="/>
        <echo message="Phing information:"/>
        <echo message="Phing file:          ${phing.file}"/>
        <echo message="Phing dir:           ${phing.dir}"/>
        <echo message="Phing home:          ${phing.home}"/>
        <echo message="Phing version:       ${phing.version}"/>
        <echo message="Phing project name:  ${phing.project.name}"/>
        <echo message="=================================================="/>
        <echo message="Build script defined properties:"/>
        <echo message="Basedir:             ${dir.base}"/>
        <echo message="Sourcedir:           ${dir.src}"/>
        <echo message="Appdir:              ${dir.app}"/>
        <echo message="Docdir:              ${dir.doc}"/>
        <echo message="Vendordir:           ${dir.vendor}"/>
        <echo message="SF Console:          ${console.symfony}"/>
        <echo message="--------------------------------------------------"/>
        <echo message="Composer installed? (composer.lock present): ${composer.installed}"/>
        <echo message="PHPUnit config file? (phpunit.dist.xml|phpunit.xml): ${phpunit.configuration}"/>
        <echo message="=================================================="/>

        <echo message="Writing fileset information to '${file.debug.fileset}'"/>
        <phingcall target="debug:fileset"/>
    </target>
    <target name="main:install" depends="composer:install, assets:install, database:create, database:schema:create, database:fixtures:load" description="[MAIN] Does a full install on an initial repository"/>
    <target name="main:update" depends="composer:update, assets:update" description="[MAIN] Updates all dependencies and installs the assets"/>
    <target name="main:build" depends="prepare:init, main:update, build:phpunit, build:phpdoc2" description="[MAIN] Generates metrics"/>
    <target name="main:uninstall" depends="prepare:cleanAll" description="[MAIN] Brings back repo to its initial state."/>
</project>
