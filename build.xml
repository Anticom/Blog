<?xml version="1.0"?>

<project name="Automated Build tasks" default="main:build" basedir=".">
    <!--<php expression="include('vendor/autoload.php')"/>-->

    <!--region properties-->
    <property name="basedir" value="." override="true"/>
    <property name="dir.src" value="${basedir}/src"/>
    <property name="dir.bin" value="${basedir}/bin"/>
    <property name="dir.app" value="${basedir}/app"/>

    <property name="dir.vendor" value="${basedir}/vendor"/>
    <property name="dir.doc" value="${basedir}/doc"/>
    <property name="dir.doc.coverage" value="${basedir}/doc/coverage"/>
    <property name="dir.doc.api" value="${basedir}/doc/api"/>

    <property name="file.debug.fileset" value="${basedir}/fileset.txt"/>
    <!--endregion-->

    <!--region config-->
    <property name="config.api.title" value="Showcase Project"/>
    <property name="config.api.markers" value="TODO, FIXME, BUG"/>

    <property name="console.symfony" value="${dir.app}/console"/>
    <property name="console.composer" value="composer"/>
    <property name="console.phpunit" value="phpunit"/>
    <!--<property name="console.phpunit" value="${dir.bin}/phpunit.bat"/>-->
    <property name="console.phpdoc2" value="${dir.bin}/phpdoc.php.bat"/>
    <!--endregion-->

    <!--region filesets-->
    <fileset dir="${dir.src}" id="sourceWithoutTests">
        <include name="**/*.php"/>

        <exclude name="**/Tests/**Test.php"/>
    </fileset>
    <fileset dir="${dir.src}" id="source">
        <include name="**/*.php"/>
    </fileset>
    <fileset dir="${dir.src}" id="tests">
        <include name="**/Tests/**Test.php"/>
    </fileset>
    <fileset dir="${dir.src}" id="assets">
        <include name="**/Resources/public/**"/>

        <!--project specific-->
        <exclude name="Anticom/ShowcaseBundle/Resources/public/user_blank.png"/>
        <exclude name="Anticom/ShowcaseBundle/Resources/public/app.css"/>
        <exclude name="Anticom/ShowcaseBundle/Resources/public/tools.js"/>
    </fileset>
    <!--endregion-->

    <!--region checks-->
    <target name="check:composer:installed" description="Checks, whether composer.lock is present">
        <available file="composer.lock" property="composer.installed" value="true"/>
    </target>
    <target name="check:phpunit:configuration" description="Chooses the right phpunit config file">
        <if>
            <available property="null" file="${dir.app}/phpunit.xml"/>
            <then>
                <property name="phpunit.configuration" value="${dir.app}/phpunit.xml"/>
            </then>
            <elseif>
                <available property="null" file="${dir.app}/phpunit.xml.dist"/>
                <then>
                    <property name="phpunit.configuration" value="${dir.app}/phpunit.xml.dist"/>
                </then>
            </elseif>
            <else>
                <fail message="Neither phpunit.dist.xml nor phpunit.xml found in ${dir.app}"/>
            </else>
        </if>
    </target>
    <!--endregion-->

    <!--main targets-->
    <target name="main:debug" depends="prepare:welcome, check:composer:installed, check:phpunit:configuration" description="[MAIN] Prints out some Variables verifying that the build process should work fine">
        <echo message="####################################################################################################"/>
        <echo message="# Host information:"/>
        <echo message="# Host name:               ${host.name}"/>
        <echo message="# Host domain:             ${host.domain}"/>
        <echo message="# Host OS:                 ${os.name}"/>
        <echo message="#                          ${host.os.version}"/>
        <echo message="#                          ${host.os.release}"/>
        <echo message="# File system:             ${host.fstype}"/>
        <echo message="# Processor architecture:  ${host.arch}"/>
        <echo message="# --------------------------------------------------"/>
        <echo message="# Phing information:"/>
        <echo message="# Phing file:              ${phing.file}"/>
        <echo message="# Phing dir:               ${phing.dir}"/>
        <echo message="# Phing home:              ${phing.home}"/>
        <echo message="# Phing version:           ${phing.version}"/>
        <echo message="# Phing project name:      ${phing.project.name}"/>
        <echo message="####################################################################################################"/>
        <echo message=""/>
        <echo message="####################################################################################################"/>
        <echo message="# Directories:"/>
        <echo message="# Basedir:                 ${basedir}"/>
        <echo message="# Source:                  ${dir.src}"/>
        <echo message="# App:                     ${dir.app}"/>
        <echo message="# Bin:                     ${dir.bin}"/>
        <echo message="# Doc:                     ${dir.doc}"/>
        <echo message="# Doc API:                 ${dir.doc.api}"/>
        <echo message="# Doc Coverage:            ${dir.doc.coverage}"/>
        <echo message="# Vendor:                  ${dir.vendor}"/>
        <echo message="# --------------------------------------------------"/>
        <echo message="# Configuration:"/>
        <echo message="# PHPDoc title:            ${config.api.title}"/>
        <echo message="# PHPDoc markers:          ${config.api.markers}"/>
        <echo message="# Symfony application:     ${console.symfony}"/>
        <echo message="# Composer executable:     ${console.composer}"/>
        <echo message="# PHPUnit executable:      ${console.phpunit}"/>
        <echo message="# PHPDoc2 executable:      ${console.phpdoc2}"/>
        <echo message="# --------------------------------------------------"/>
        <echo message="# Composer installed?:     ${composer.installed}"/>
        <echo message="# PHPUnit config file:     ${phpunit.configuration}"/>
        <echo message="####################################################################################################"/>
    </target>
    <target name="main:install" depends="prepare:welcome, composer:install, assets:install, database:create, database:schema:create, database:fixtures:load" description="[MAIN] Does a full install on an initial repository"/>
    <target name="main:update" depends="prepare:welcome, composer:update, assets:update" description="[MAIN] Updates all dependencies and installs the assets"/>
    <target name="main:build" depends="prepare:welcome, prepare:init, main:update, build:phpunit, build:api" description="[MAIN] Generates metrics"/>
    <target name="main:uninstall" depends="prepare:welcome, prepare:cleanAll" description="[MAIN] Brings back repo to its initial state."/>
    <!--endregion-->

    <!--region init-->
    <target name="prepare:welcome">
        <echo message="    _          _   _"/>
        <echo message="   / \   _ __ | |_(_) ___ ___  _ __ ___"/>
        <echo message="  / _ \ | '_ \| __| |/ __/ _ \| '_ ` _ \"/>
        <echo message=" / ___ \| | | | |_| | (_| (_) | | | | | |"/>
        <echo message="/_/   \_\_| |_|\__|_|\___\___/|_| |_| |_|"/>
        <echo message=""/>
        <echo message=" ____  _                                     ____                  _ _"/>
        <echo message="/ ___|| |__   _____      _____ __ _ ___  ___| __ ) _   _ _ __   __| | | ___"/>
        <echo message="\___ \| '_ \ / _ \ \ /\ / / __/ _` / __|/ _ \  _ \| | | | '_ \ / _` | |/ _ \"/>
        <echo message=" ___) | | | | (_) \ V  V / (_| (_| \__ \  __/ |_) | |_| | | | | (_| | |  __/"/>
        <echo message="|____/|_| |_|\___/ \_/\_/ \___\__,_|___/\___|____/ \__,_|_| |_|\__,_|_|\___|"/>
        <echo message=""/>
        <echo message="By Timo Muehlbach"/>
    </target>
    <target name="prepare:clean" description="Cleans up build directories">
        <echo message="Deleting documentation directory structure (${dir.doc})"/>
        <delete dir="${dir.doc.api}"/>
        <delete dir="${dir.doc.coverage}"/>
        <delete dir="${dir.doc}"/>
    </target>
    <target name="prepare:cleanAll" depends="prepare:clean" description="Cleans up generated files and folders. Brings back repo to its initial state">
        <echo message="Deleting vendor directory (${dir.vendor})"/>
        <delete dir="${dir.vendor}"/>
        <echo message="Deleting asset directories"/>
        <!--TODO do delete assets-->
    </target>
    <target name="prepare:init" depends="prepare:clean" description="Creates cleaned up directory structure again">
        <echo message="Creating documentation directory structure (${dir.doc})"/>
        <mkdir dir="${dir.doc}"/>
        <mkdir dir="${dir.doc.api}"/>
        <mkdir dir="${dir.doc.coverage}"/>
    </target>
    <!--endregion-->

    <!--region build-->
    <target name="composer:install" depends="check:composer:installed" description="Installs composer vendor libs">
        <if>
            <istrue value="${composer.installed}"/>
            <then>
                <echo message="composer.lock is already present. Not running 'composer install'"/>
            </then>
            <else>
                <exec command="${console.composer} install --prefer-source" passthru="true" checkreturn="true"/>
            </else>
        </if>
    </target>
    <target name="composer:update" depends="check:composer:installed" description="Updates composer vendor libs">
        <if>
            <istrue value="${composer.installed}"/>
            <then>
                <exec command="${console.composer} update" passthru="true" checkreturn="true"/>
            </then>
            <else>
                <echo message="composer.lock is not present. You need to run composer_install target first."/>
            </else>
        </if>
    </target>

    <target name="assets:install" description="installs assets">
        <!--bower-->
        <exec command="bower install" passthru="true" checkreturn="true"/>
        <!--tinymce-->
        <exec command="jake" dir="${dir.src}/Anticom/ShowcaseBundle/Resources/public/tinymce" passthru="true" checkreturn="true"/>
        <!--tinymce de_DE-->
        <!--TODO figure this one out-->
    </target>
    <target name="assets:update" depends="assets:install" description="updates assets">
        <exec command="${console.symfony} assets:install -n" passthru="true" checkreturn="true"/>
    </target>

    <target name="database:create" description="Creates the default database">
        <exec command="${console.symfony} doctrine:database:create -n" passthru="true" checkreturn="true"/>
    </target>
    <target name="database:schema:create" description="Creates the schema">
        <exec command="${console.symfony} doctrine:schema:create -n" passthru="true" checkreturn="true"/>
    </target>
    <target name="database:fixtures:load" description="Loads data fixtures">
        <exec command="${console.symfony} doctrine:schema:drop -n --force" passthru="true" checkreturn="true"/>
        <exec command="${console.symfony} doctrine:schema:create -n" passthru="true" checkreturn="true"/>
        <exec command="${console.symfony} doctrine:fixtures:load -n" passthru="true" checkreturn="true"/>
    </target>

    <target name="build:phpunit" depends="prepare:init, check:phpunit:configuration" description="Runs PHPUnit to generate code coverage information">
        <exec command="${console.phpunit} -c app/ --coverage-html ${dir.doc.coverage}" passthru="true" checkreturn="true"/>
    </target>
    <target name="build:api" depends="prepare:init" description="Generate API documentation using PHPDoc2">
        <echo message="${console.phpdoc2} -t=&quot;${dir.doc.api}&quot; -d=&quot;${phing.dir}\src&quot; -m=&quot;${config.api.markers}&quot; -title=&quot;${config.api.title}&quot;"/>
        <exec command="${console.phpdoc2} -t=&quot;${dir.doc.api}&quot; -d=&quot;${phing.dir}\src&quot; -m=&quot;${config.api.markers}&quot; -title=&quot;${config.api.title}&quot;" passthru="true" checkreturn="true"/>
    </target>
    <!--endregion-->

    <!--region debugging-->
    <target name="debug:fileset">
        <delete file="${file.debug.fileset}"/>
        <echo file="${file.debug.fileset}" append="true" message="sourceWithoutTests${line.separator}"/>
        <foreach param="filename" absparam="absfilename" target="debug:fileset:echo">
            <fileset refid="sourceWithoutTests"/>
        </foreach>

        <echo file="${file.debug.fileset}" append="true" message="source${line.separator}"/>
        <foreach param="filename" absparam="absfilename" target="debug:fileset:echo">
            <fileset refid="source"/>
        </foreach>

        <echo file="${file.debug.fileset}" append="true" message="tests${line.separator}"/>
        <foreach param="filename" absparam="absfilename" target="debug:fileset:echo">
            <fileset refid="tests"/>
        </foreach>
        <!--
        <echo file="${file.debug.fileset}" append="true" message="assets${line.separator}"/>
        <foreach param="filename" absparam="absfilename" target="debug:fileset:echo">
            <fileset refid="assets"/>
        </foreach>
        -->
    </target>
    <target name="debug:fileset:echo">
        <!--<echo file="${file.debug.fileset}" append="true">file: rel:${filename}|abs:${absfilename}${line.separator}</echo>-->
        <echo file="${file.debug.fileset}" append="true">  - ${absfilename}${line.separator}</echo>
    </target>
    <!--endregion-->
</project>
